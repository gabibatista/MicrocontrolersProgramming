
aula4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000009a4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c5  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006b8  00000000  00000000  00000b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002e1  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000623  00000000  00000000  00001506  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f0  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d2  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000312  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 ea       	ldi	r30, 0xA4	; 164
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
  c8:	a0 35       	cpi	r26, 0x50	; 80
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>
  ce:	0e 94 83 00 	call	0x106	; 0x106 <main>
  d2:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <IO_init>:
#include "lcd_usb.h"


//define funções e rotinas
void IO_init(void){
	DDRB = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1);
  da:	8e ef       	ldi	r24, 0xFE	; 254
  dc:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<6)|(1<<7);
  de:	90 ec       	ldi	r25, 0xC0	; 192
  e0:	97 b9       	out	0x07, r25	; 7
	DDRD = (1<<4)|(1<<6)|(1<<7);
  e2:	80 ed       	ldi	r24, 0xD0	; 208
  e4:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0;
  e6:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0;
  e8:	10 ba       	out	0x10, r1	; 16
	PORTB = 0;
  ea:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
  ec:	18 b8       	out	0x08, r1	; 8
	PORTD = (1<<5)|(1<<1)|(1<<0);
  ee:	83 e2       	ldi	r24, 0x23	; 35
  f0:	8b b9       	out	0x0b, r24	; 11
	PORTE = (1<<2);
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	8e b9       	out	0x0e, r24	; 14
	PORTF = (1<<7)|(1<<6);
  f6:	91 bb       	out	0x11, r25	; 17
	MCUCR |= (1<<JTD);
  f8:	85 b7       	in	r24, 0x35	; 53
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<JTD); //desliga interface JTAG.
  fe:	85 b7       	in	r24, 0x35	; 53
 100:	80 68       	ori	r24, 0x80	; 128
 102:	85 bf       	out	0x35, r24	; 53
}
 104:	08 95       	ret

00000106 <main>:


// programa principal
int main(void)
{
 106:	af 92       	push	r10
 108:	bf 92       	push	r11
 10a:	cf 92       	push	r12
 10c:	df 92       	push	r13
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	df 93       	push	r29
 118:	cf 93       	push	r28
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	64 97       	sbiw	r28, 0x14	; 20
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
char lcd_buffer[20];
char x;

	IO_init(); // inicia pinos de IO da placa. 
 12a:	0e 94 6d 00 	call	0xda	; 0xda <IO_init>
	lcd_init(LCD_DISP_ON); //inicia o LCD
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	0e 94 ae 01 	call	0x35c	; 0x35c <lcd_init>
	lcd_clrscr(); //Limpa tela do LCD
 134:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_clrscr>


	sprintf(lcd_buffer,"LCD ativado     ");
 138:	8e 01       	movw	r16, r28
 13a:	0f 5f       	subi	r16, 0xFF	; 255
 13c:	1f 4f       	sbci	r17, 0xFF	; 255
 13e:	c8 01       	movw	r24, r16
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	71 e0       	ldi	r23, 0x01	; 1
 144:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <strcpy>
	lcd_puts(lcd_buffer);
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 94 01 	call	0x328	; 0x328 <lcd_puts>
	lcd_gotoxy(0,1);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_gotoxy>
	sprintf(lcd_buffer,"aperte ack      ");
 156:	c8 01       	movw	r24, r16
 158:	61 e1       	ldi	r22, 0x11	; 17
 15a:	71 e0       	ldi	r23, 0x01	; 1
 15c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <strcpy>
	lcd_puts(lcd_buffer);
 160:	c8 01       	movw	r24, r16
 162:	0e 94 94 01 	call	0x328	; 0x328 <lcd_puts>
 166:	ee 24       	eor	r14, r14
	while(1){

		if(Ch_busy_lig){
			x--;
			lcd_gotoxy(0,0);
			sprintf(lcd_buffer,"x= %d       ",x);
 168:	f0 2e       	mov	r15, r16
 16a:	01 2f       	mov	r16, r17
 16c:	92 e2       	ldi	r25, 0x22	; 34
 16e:	c9 2e       	mov	r12, r25
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	d9 2e       	mov	r13, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 174:	88 ec       	ldi	r24, 0xC8	; 200
 176:	a8 2e       	mov	r10, r24
 178:	b1 2c       	mov	r11, r1

	x=0;
	
	while(1){

		if(Ch_busy_lig){
 17a:	4d 99       	sbic	0x09, 5	; 9
 17c:	32 c0       	rjmp	.+100    	; 0x1e2 <main+0xdc>
			x--;
 17e:	ea 94       	dec	r14
			lcd_gotoxy(0,0);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_gotoxy>
			sprintf(lcd_buffer,"x= %d       ",x);
 188:	00 d0       	rcall	.+0      	; 0x18a <main+0x84>
 18a:	00 d0       	rcall	.+0      	; 0x18c <main+0x86>
 18c:	00 d0       	rcall	.+0      	; 0x18e <main+0x88>
 18e:	ed b7       	in	r30, 0x3d	; 61
 190:	fe b7       	in	r31, 0x3e	; 62
 192:	31 96       	adiw	r30, 0x01	; 1
 194:	ad b7       	in	r26, 0x3d	; 61
 196:	be b7       	in	r27, 0x3e	; 62
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	fc 92       	st	X, r15
 19c:	11 97       	sbiw	r26, 0x01	; 1
 19e:	12 96       	adiw	r26, 0x02	; 2
 1a0:	0c 93       	st	X, r16
 1a2:	d3 82       	std	Z+3, r13	; 0x03
 1a4:	c2 82       	std	Z+2, r12	; 0x02
 1a6:	e4 82       	std	Z+4, r14	; 0x04
 1a8:	15 82       	std	Z+5, r1	; 0x05
 1aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sprintf>
			lcd_puts(lcd_buffer);
 1ae:	8d b7       	in	r24, 0x3d	; 61
 1b0:	9e b7       	in	r25, 0x3e	; 62
 1b2:	06 96       	adiw	r24, 0x06	; 6
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	9e bf       	out	0x3e, r25	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	8d bf       	out	0x3d, r24	; 61
 1be:	8f 2d       	mov	r24, r15
 1c0:	90 2f       	mov	r25, r16
 1c2:	0e 94 94 01 	call	0x328	; 0x328 <lcd_puts>
			lcd_gotoxy(0,1);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_gotoxy>
			sprintf(lcd_buffer,"aperte ack +   ");
 1ce:	8f 2d       	mov	r24, r15
 1d0:	90 2f       	mov	r25, r16
 1d2:	6f e2       	ldi	r22, 0x2F	; 47
 1d4:	71 e0       	ldi	r23, 0x01	; 1
 1d6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <strcpy>
			lcd_puts(lcd_buffer);
 1da:	8f 2d       	mov	r24, r15
 1dc:	90 2f       	mov	r25, r16
 1de:	0e 94 94 01 	call	0x328	; 0x328 <lcd_puts>
		}

		if(Ch_ack_lig){
 1e2:	49 99       	sbic	0x09, 1	; 9
 1e4:	32 c0       	rjmp	.+100    	; 0x24a <main+0x144>
			x++;
 1e6:	e3 94       	inc	r14
			lcd_gotoxy(0,0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_gotoxy>
			sprintf(lcd_buffer,"x= %d       ",x);
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <main+0xec>
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <main+0xee>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <main+0xf0>
 1f6:	ed b7       	in	r30, 0x3d	; 61
 1f8:	fe b7       	in	r31, 0x3e	; 62
 1fa:	31 96       	adiw	r30, 0x01	; 1
 1fc:	ad b7       	in	r26, 0x3d	; 61
 1fe:	be b7       	in	r27, 0x3e	; 62
 200:	11 96       	adiw	r26, 0x01	; 1
 202:	fc 92       	st	X, r15
 204:	11 97       	sbiw	r26, 0x01	; 1
 206:	12 96       	adiw	r26, 0x02	; 2
 208:	0c 93       	st	X, r16
 20a:	d3 82       	std	Z+3, r13	; 0x03
 20c:	c2 82       	std	Z+2, r12	; 0x02
 20e:	e4 82       	std	Z+4, r14	; 0x04
 210:	15 82       	std	Z+5, r1	; 0x05
 212:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sprintf>
			lcd_puts(lcd_buffer);
 216:	8d b7       	in	r24, 0x3d	; 61
 218:	9e b7       	in	r25, 0x3e	; 62
 21a:	06 96       	adiw	r24, 0x06	; 6
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	9e bf       	out	0x3e, r25	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	8d bf       	out	0x3d, r24	; 61
 226:	8f 2d       	mov	r24, r15
 228:	90 2f       	mov	r25, r16
 22a:	0e 94 94 01 	call	0x328	; 0x328 <lcd_puts>
			lcd_gotoxy(0,1);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_gotoxy>
			sprintf(lcd_buffer,"aperte busy -  ");
 236:	8f 2d       	mov	r24, r15
 238:	90 2f       	mov	r25, r16
 23a:	6f e3       	ldi	r22, 0x3F	; 63
 23c:	71 e0       	ldi	r23, 0x01	; 1
 23e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <strcpy>
			lcd_puts(lcd_buffer);
 242:	8f 2d       	mov	r24, r15
 244:	90 2f       	mov	r25, r16
 246:	0e 94 94 01 	call	0x328	; 0x328 <lcd_puts>
 24a:	88 e8       	ldi	r24, 0x88	; 136
 24c:	93 e1       	ldi	r25, 0x13	; 19
 24e:	f5 01       	movw	r30, r10
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x14a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 256:	d9 f7       	brne	.-10     	; 0x24e <main+0x148>
 258:	90 cf       	rjmp	.-224    	; 0x17a <main+0x74>

0000025a <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs)
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 25a:	66 23       	and	r22, r22
 25c:	11 f0       	breq	.+4      	; 0x262 <lcd_write+0x8>
       lcd_rs_high();
 25e:	28 9a       	sbi	0x05, 0	; 5
 260:	01 c0       	rjmp	.+2      	; 0x264 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 262:	28 98       	cbi	0x05, 0	; 5
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 264:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 266:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 268:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 26a:	3f 9a       	sbi	0x07, 7	; 7

        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 26c:	47 98       	cbi	0x08, 7	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 26e:	46 98       	cbi	0x08, 6	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 270:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 272:	2d 98       	cbi	0x05, 5	; 5
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 274:	87 fd       	sbrc	r24, 7
 276:	47 9a       	sbi	0x08, 7	; 8
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 278:	86 fd       	sbrc	r24, 6
 27a:	46 9a       	sbi	0x08, 6	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 27c:	85 fd       	sbrc	r24, 5
 27e:	2e 9a       	sbi	0x05, 6	; 5
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 280:	84 fd       	sbrc	r24, 4
 282:	2d 9a       	sbi	0x05, 5	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 284:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 286:	e6 e0       	ldi	r30, 0x06	; 6
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <lcd_write+0x30>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 28e:	76 98       	cbi	0x0e, 6	; 14
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 290:	47 98       	cbi	0x08, 7	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 292:	46 98       	cbi	0x08, 6	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 294:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 296:	2d 98       	cbi	0x05, 5	; 5
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 298:	83 fd       	sbrc	r24, 3
 29a:	47 9a       	sbi	0x08, 7	; 8
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 29c:	82 fd       	sbrc	r24, 2
 29e:	46 9a       	sbi	0x08, 6	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 2a0:	81 fd       	sbrc	r24, 1
 2a2:	2e 9a       	sbi	0x05, 6	; 5
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 2a4:	80 fd       	sbrc	r24, 0
 2a6:	2d 9a       	sbi	0x05, 5	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 2a8:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2aa:	86 e0       	ldi	r24, 0x06	; 6
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_write+0x54>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 2b2:	76 98       	cbi	0x0e, 6	; 14
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();

        /* all data pins low (inactive) */
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 2b4:	2d 98       	cbi	0x05, 5	; 5
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 2b6:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 2b8:	46 98       	cbi	0x08, 6	; 8
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 2ba:	47 98       	cbi	0x08, 7	; 8
    }
}
 2bc:	08 95       	ret

000002be <lcd_command>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2be:	e0 e8       	ldi	r30, 0x80	; 128
 2c0:	fc e0       	ldi	r31, 0x0C	; 12
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <lcd_command+0x4>
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_write>
}
 2cc:	08 95       	ret

000002ce <lcd_data>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ce:	e0 e8       	ldi	r30, 0x80	; 128
 2d0:	fc e0       	ldi	r31, 0x0C	; 12
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_data+0x4>
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_write>
}
 2dc:	08 95       	ret

000002de <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 )
 2de:	66 23       	and	r22, r22
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 2e2:	80 58       	subi	r24, 0x80	; 128
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 2e6:	80 54       	subi	r24, 0x40	; 64
 2e8:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
 2ec:	08 95       	ret

000002ee <lcd_getxy>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	9c e0       	ldi	r25, 0x0C	; 12
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <lcd_getxy+0x4>
/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	08 95       	ret

000002fc <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
}
 302:	08 95       	ret

00000304 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
}
 30a:	08 95       	ret

0000030c <lcd_putc>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 30c:	e0 e8       	ldi	r30, 0x80	; 128
 30e:	fc e0       	ldi	r31, 0x0C	; 12
 310:	31 97       	sbiw	r30, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <lcd_putc+0x4>
{
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    if (c=='\n')
 314:	8a 30       	cpi	r24, 0x0A	; 10
 316:	21 f4       	brne	.+8      	; 0x320 <lcd_putc+0x14>
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 318:	80 ec       	ldi	r24, 0xC0	; 192
 31a:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
 31e:	08 95       	ret
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_write>
 326:	08 95       	ret

00000328 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	ec 01       	movw	r28, r24
 32e:	02 c0       	rjmp	.+4      	; 0x334 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 330:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 334:	89 91       	ld	r24, Y+
 336:	88 23       	and	r24, r24
 338:	d9 f7       	brne	.-10     	; 0x330 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	08 95       	ret

00000340 <lcd_puts_p>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
 346:	02 c0       	rjmp	.+4      	; 0x34c <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 348:	0e 94 86 01 	call	0x30c	; 0x30c <lcd_putc>
 34c:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 34e:	21 96       	adiw	r28, 0x01	; 1
 350:	84 91       	lpm	r24, Z+
 352:	88 23       	and	r24, r24
 354:	c9 f7       	brne	.-14     	; 0x348 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 35c:	1f 93       	push	r17
 35e:	18 2f       	mov	r17, r24
     *  Initialize LCD to 4 bit I/O mode
     */


        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 360:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 362:	6e 9a       	sbi	0x0d, 6	; 13
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 364:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 366:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 368:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 36a:	3f 9a       	sbi	0x07, 7	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	98 ec       	ldi	r25, 0xC8	; 200
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <lcd_init+0x14>
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 374:	2e 9a       	sbi	0x05, 6	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 376:	2d 9a       	sbi	0x05, 5	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 378:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 37a:	26 e0       	ldi	r18, 0x06	; 6
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	c9 01       	movw	r24, r18
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init+0x24>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 384:	76 98       	cbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 386:	86 e6       	ldi	r24, 0x66	; 102
 388:	9e e3       	ldi	r25, 0x3E	; 62
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <lcd_init+0x2e>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 38e:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 390:	c9 01       	movw	r24, r18
 392:	01 97       	sbiw	r24, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <lcd_init+0x36>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 396:	76 98       	cbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 398:	8c ec       	ldi	r24, 0xCC	; 204
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	fc 01       	movw	r30, r24
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_init+0x42>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3a2:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3a4:	f9 01       	movw	r30, r18
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_init+0x4a>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 3aa:	76 98       	cbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3ac:	fc 01       	movw	r30, r24
 3ae:	31 97       	sbiw	r30, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0x52>
    /* repeat last command a third time */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 3b2:	2d 98       	cbi	0x05, 5	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 3b4:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3b6:	f9 01       	movw	r30, r18
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <lcd_init+0x5c>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 3bc:	76 98       	cbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_init+0x62>

    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */



    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>


    lcd_command(LCD_DISP_OFF);              /* display off                  */
 3c8:	88 e0       	ldi	r24, 0x08	; 8
 3ca:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
    lcd_clrscr();                           /* display clear                */
 3ce:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 3d2:	86 e0       	ldi	r24, 0x06	; 6
 3d4:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 3d8:	81 2f       	mov	r24, r17
 3da:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_command>

}/* lcd_init */
 3de:	1f 91       	pop	r17
 3e0:	08 95       	ret

000003e2 <strcpy>:
 3e2:	fb 01       	movw	r30, r22
 3e4:	dc 01       	movw	r26, r24
 3e6:	01 90       	ld	r0, Z+
 3e8:	0d 92       	st	X+, r0
 3ea:	00 20       	and	r0, r0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <strcpy+0x4>
 3ee:	08 95       	ret

000003f0 <sprintf>:
 3f0:	ae e0       	ldi	r26, 0x0E	; 14
 3f2:	b0 e0       	ldi	r27, 0x00	; 0
 3f4:	ee ef       	ldi	r30, 0xFE	; 254
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__prologue_saves__+0x1c>
 3fc:	0d 89       	ldd	r16, Y+21	; 0x15
 3fe:	1e 89       	ldd	r17, Y+22	; 0x16
 400:	86 e0       	ldi	r24, 0x06	; 6
 402:	8c 83       	std	Y+4, r24	; 0x04
 404:	1a 83       	std	Y+2, r17	; 0x02
 406:	09 83       	std	Y+1, r16	; 0x01
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	9f e7       	ldi	r25, 0x7F	; 127
 40c:	9e 83       	std	Y+6, r25	; 0x06
 40e:	8d 83       	std	Y+5, r24	; 0x05
 410:	9e 01       	movw	r18, r28
 412:	27 5e       	subi	r18, 0xE7	; 231
 414:	3f 4f       	sbci	r19, 0xFF	; 255
 416:	ce 01       	movw	r24, r28
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	6f 89       	ldd	r22, Y+23	; 0x17
 41c:	78 8d       	ldd	r23, Y+24	; 0x18
 41e:	a9 01       	movw	r20, r18
 420:	0e 94 1c 02 	call	0x438	; 0x438 <vfprintf>
 424:	2f 81       	ldd	r18, Y+7	; 0x07
 426:	38 85       	ldd	r19, Y+8	; 0x08
 428:	02 0f       	add	r16, r18
 42a:	13 1f       	adc	r17, r19
 42c:	f8 01       	movw	r30, r16
 42e:	10 82       	st	Z, r1
 430:	2e 96       	adiw	r28, 0x0e	; 14
 432:	e4 e0       	ldi	r30, 0x04	; 4
 434:	0c 94 c3 04 	jmp	0x986	; 0x986 <__epilogue_restores__+0x1c>

00000438 <vfprintf>:
 438:	ab e0       	ldi	r26, 0x0B	; 11
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e2 e2       	ldi	r30, 0x22	; 34
 43e:	f2 e0       	ldi	r31, 0x02	; 2
 440:	0c 94 99 04 	jmp	0x932	; 0x932 <__prologue_saves__>
 444:	3c 01       	movw	r6, r24
 446:	2b 01       	movw	r4, r22
 448:	5a 01       	movw	r10, r20
 44a:	fc 01       	movw	r30, r24
 44c:	17 82       	std	Z+7, r1	; 0x07
 44e:	16 82       	std	Z+6, r1	; 0x06
 450:	83 81       	ldd	r24, Z+3	; 0x03
 452:	81 fd       	sbrc	r24, 1
 454:	03 c0       	rjmp	.+6      	; 0x45c <vfprintf+0x24>
 456:	6f ef       	ldi	r22, 0xFF	; 255
 458:	7f ef       	ldi	r23, 0xFF	; 255
 45a:	c6 c1       	rjmp	.+908    	; 0x7e8 <vfprintf+0x3b0>
 45c:	9a e0       	ldi	r25, 0x0A	; 10
 45e:	89 2e       	mov	r8, r25
 460:	1e 01       	movw	r2, r28
 462:	08 94       	sec
 464:	21 1c       	adc	r2, r1
 466:	31 1c       	adc	r3, r1
 468:	f3 01       	movw	r30, r6
 46a:	23 81       	ldd	r18, Z+3	; 0x03
 46c:	f2 01       	movw	r30, r4
 46e:	23 fd       	sbrc	r18, 3
 470:	85 91       	lpm	r24, Z+
 472:	23 ff       	sbrs	r18, 3
 474:	81 91       	ld	r24, Z+
 476:	2f 01       	movw	r4, r30
 478:	88 23       	and	r24, r24
 47a:	09 f4       	brne	.+2      	; 0x47e <vfprintf+0x46>
 47c:	b2 c1       	rjmp	.+868    	; 0x7e2 <vfprintf+0x3aa>
 47e:	85 32       	cpi	r24, 0x25	; 37
 480:	39 f4       	brne	.+14     	; 0x490 <vfprintf+0x58>
 482:	23 fd       	sbrc	r18, 3
 484:	85 91       	lpm	r24, Z+
 486:	23 ff       	sbrs	r18, 3
 488:	81 91       	ld	r24, Z+
 48a:	2f 01       	movw	r4, r30
 48c:	85 32       	cpi	r24, 0x25	; 37
 48e:	29 f4       	brne	.+10     	; 0x49a <vfprintf+0x62>
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	b3 01       	movw	r22, r6
 494:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 498:	e7 cf       	rjmp	.-50     	; 0x468 <vfprintf+0x30>
 49a:	98 2f       	mov	r25, r24
 49c:	ff 24       	eor	r15, r15
 49e:	ee 24       	eor	r14, r14
 4a0:	99 24       	eor	r9, r9
 4a2:	ff e1       	ldi	r31, 0x1F	; 31
 4a4:	ff 15       	cp	r31, r15
 4a6:	d0 f0       	brcs	.+52     	; 0x4dc <vfprintf+0xa4>
 4a8:	9b 32       	cpi	r25, 0x2B	; 43
 4aa:	69 f0       	breq	.+26     	; 0x4c6 <vfprintf+0x8e>
 4ac:	9c 32       	cpi	r25, 0x2C	; 44
 4ae:	28 f4       	brcc	.+10     	; 0x4ba <vfprintf+0x82>
 4b0:	90 32       	cpi	r25, 0x20	; 32
 4b2:	59 f0       	breq	.+22     	; 0x4ca <vfprintf+0x92>
 4b4:	93 32       	cpi	r25, 0x23	; 35
 4b6:	91 f4       	brne	.+36     	; 0x4dc <vfprintf+0xa4>
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <vfprintf+0x9e>
 4ba:	9d 32       	cpi	r25, 0x2D	; 45
 4bc:	49 f0       	breq	.+18     	; 0x4d0 <vfprintf+0x98>
 4be:	90 33       	cpi	r25, 0x30	; 48
 4c0:	69 f4       	brne	.+26     	; 0x4dc <vfprintf+0xa4>
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	24 c0       	rjmp	.+72     	; 0x50e <vfprintf+0xd6>
 4c6:	52 e0       	ldi	r21, 0x02	; 2
 4c8:	f5 2a       	or	r15, r21
 4ca:	84 e0       	ldi	r24, 0x04	; 4
 4cc:	f8 2a       	or	r15, r24
 4ce:	28 c0       	rjmp	.+80     	; 0x520 <vfprintf+0xe8>
 4d0:	98 e0       	ldi	r25, 0x08	; 8
 4d2:	f9 2a       	or	r15, r25
 4d4:	25 c0       	rjmp	.+74     	; 0x520 <vfprintf+0xe8>
 4d6:	e0 e1       	ldi	r30, 0x10	; 16
 4d8:	fe 2a       	or	r15, r30
 4da:	22 c0       	rjmp	.+68     	; 0x520 <vfprintf+0xe8>
 4dc:	f7 fc       	sbrc	r15, 7
 4de:	29 c0       	rjmp	.+82     	; 0x532 <vfprintf+0xfa>
 4e0:	89 2f       	mov	r24, r25
 4e2:	80 53       	subi	r24, 0x30	; 48
 4e4:	8a 30       	cpi	r24, 0x0A	; 10
 4e6:	70 f4       	brcc	.+28     	; 0x504 <vfprintf+0xcc>
 4e8:	f6 fe       	sbrs	r15, 6
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <vfprintf+0xbe>
 4ec:	98 9c       	mul	r9, r8
 4ee:	90 2c       	mov	r9, r0
 4f0:	11 24       	eor	r1, r1
 4f2:	98 0e       	add	r9, r24
 4f4:	15 c0       	rjmp	.+42     	; 0x520 <vfprintf+0xe8>
 4f6:	e8 9c       	mul	r14, r8
 4f8:	e0 2c       	mov	r14, r0
 4fa:	11 24       	eor	r1, r1
 4fc:	e8 0e       	add	r14, r24
 4fe:	f0 e2       	ldi	r31, 0x20	; 32
 500:	ff 2a       	or	r15, r31
 502:	0e c0       	rjmp	.+28     	; 0x520 <vfprintf+0xe8>
 504:	9e 32       	cpi	r25, 0x2E	; 46
 506:	29 f4       	brne	.+10     	; 0x512 <vfprintf+0xda>
 508:	f6 fc       	sbrc	r15, 6
 50a:	6b c1       	rjmp	.+726    	; 0x7e2 <vfprintf+0x3aa>
 50c:	40 e4       	ldi	r20, 0x40	; 64
 50e:	f4 2a       	or	r15, r20
 510:	07 c0       	rjmp	.+14     	; 0x520 <vfprintf+0xe8>
 512:	9c 36       	cpi	r25, 0x6C	; 108
 514:	19 f4       	brne	.+6      	; 0x51c <vfprintf+0xe4>
 516:	50 e8       	ldi	r21, 0x80	; 128
 518:	f5 2a       	or	r15, r21
 51a:	02 c0       	rjmp	.+4      	; 0x520 <vfprintf+0xe8>
 51c:	98 36       	cpi	r25, 0x68	; 104
 51e:	49 f4       	brne	.+18     	; 0x532 <vfprintf+0xfa>
 520:	f2 01       	movw	r30, r4
 522:	23 fd       	sbrc	r18, 3
 524:	95 91       	lpm	r25, Z+
 526:	23 ff       	sbrs	r18, 3
 528:	91 91       	ld	r25, Z+
 52a:	2f 01       	movw	r4, r30
 52c:	99 23       	and	r25, r25
 52e:	09 f0       	breq	.+2      	; 0x532 <vfprintf+0xfa>
 530:	b8 cf       	rjmp	.-144    	; 0x4a2 <vfprintf+0x6a>
 532:	89 2f       	mov	r24, r25
 534:	85 54       	subi	r24, 0x45	; 69
 536:	83 30       	cpi	r24, 0x03	; 3
 538:	18 f0       	brcs	.+6      	; 0x540 <vfprintf+0x108>
 53a:	80 52       	subi	r24, 0x20	; 32
 53c:	83 30       	cpi	r24, 0x03	; 3
 53e:	38 f4       	brcc	.+14     	; 0x54e <vfprintf+0x116>
 540:	44 e0       	ldi	r20, 0x04	; 4
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	a4 0e       	add	r10, r20
 546:	b5 1e       	adc	r11, r21
 548:	5f e3       	ldi	r21, 0x3F	; 63
 54a:	59 83       	std	Y+1, r21	; 0x01
 54c:	0f c0       	rjmp	.+30     	; 0x56c <vfprintf+0x134>
 54e:	93 36       	cpi	r25, 0x63	; 99
 550:	31 f0       	breq	.+12     	; 0x55e <vfprintf+0x126>
 552:	93 37       	cpi	r25, 0x73	; 115
 554:	79 f0       	breq	.+30     	; 0x574 <vfprintf+0x13c>
 556:	93 35       	cpi	r25, 0x53	; 83
 558:	09 f0       	breq	.+2      	; 0x55c <vfprintf+0x124>
 55a:	56 c0       	rjmp	.+172    	; 0x608 <vfprintf+0x1d0>
 55c:	20 c0       	rjmp	.+64     	; 0x59e <vfprintf+0x166>
 55e:	f5 01       	movw	r30, r10
 560:	80 81       	ld	r24, Z
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	42 e0       	ldi	r20, 0x02	; 2
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	a4 0e       	add	r10, r20
 56a:	b5 1e       	adc	r11, r21
 56c:	61 01       	movw	r12, r2
 56e:	01 e0       	ldi	r16, 0x01	; 1
 570:	10 e0       	ldi	r17, 0x00	; 0
 572:	12 c0       	rjmp	.+36     	; 0x598 <vfprintf+0x160>
 574:	f5 01       	movw	r30, r10
 576:	c0 80       	ld	r12, Z
 578:	d1 80       	ldd	r13, Z+1	; 0x01
 57a:	f6 fc       	sbrc	r15, 6
 57c:	03 c0       	rjmp	.+6      	; 0x584 <vfprintf+0x14c>
 57e:	6f ef       	ldi	r22, 0xFF	; 255
 580:	7f ef       	ldi	r23, 0xFF	; 255
 582:	02 c0       	rjmp	.+4      	; 0x588 <vfprintf+0x150>
 584:	69 2d       	mov	r22, r9
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	42 e0       	ldi	r20, 0x02	; 2
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	a4 0e       	add	r10, r20
 58e:	b5 1e       	adc	r11, r21
 590:	c6 01       	movw	r24, r12
 592:	0e 94 04 04 	call	0x808	; 0x808 <strnlen>
 596:	8c 01       	movw	r16, r24
 598:	5f e7       	ldi	r21, 0x7F	; 127
 59a:	f5 22       	and	r15, r21
 59c:	14 c0       	rjmp	.+40     	; 0x5c6 <vfprintf+0x18e>
 59e:	f5 01       	movw	r30, r10
 5a0:	c0 80       	ld	r12, Z
 5a2:	d1 80       	ldd	r13, Z+1	; 0x01
 5a4:	f6 fc       	sbrc	r15, 6
 5a6:	03 c0       	rjmp	.+6      	; 0x5ae <vfprintf+0x176>
 5a8:	6f ef       	ldi	r22, 0xFF	; 255
 5aa:	7f ef       	ldi	r23, 0xFF	; 255
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <vfprintf+0x17a>
 5ae:	69 2d       	mov	r22, r9
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	42 e0       	ldi	r20, 0x02	; 2
 5b4:	50 e0       	ldi	r21, 0x00	; 0
 5b6:	a4 0e       	add	r10, r20
 5b8:	b5 1e       	adc	r11, r21
 5ba:	c6 01       	movw	r24, r12
 5bc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <strnlen_P>
 5c0:	8c 01       	movw	r16, r24
 5c2:	50 e8       	ldi	r21, 0x80	; 128
 5c4:	f5 2a       	or	r15, r21
 5c6:	f3 fe       	sbrs	r15, 3
 5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <vfprintf+0x1a0>
 5ca:	1a c0       	rjmp	.+52     	; 0x600 <vfprintf+0x1c8>
 5cc:	80 e2       	ldi	r24, 0x20	; 32
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	b3 01       	movw	r22, r6
 5d2:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 5d6:	ea 94       	dec	r14
 5d8:	8e 2d       	mov	r24, r14
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	08 17       	cp	r16, r24
 5de:	19 07       	cpc	r17, r25
 5e0:	a8 f3       	brcs	.-22     	; 0x5cc <vfprintf+0x194>
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <vfprintf+0x1c8>
 5e4:	f6 01       	movw	r30, r12
 5e6:	f7 fc       	sbrc	r15, 7
 5e8:	85 91       	lpm	r24, Z+
 5ea:	f7 fe       	sbrs	r15, 7
 5ec:	81 91       	ld	r24, Z+
 5ee:	6f 01       	movw	r12, r30
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	b3 01       	movw	r22, r6
 5f4:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 5f8:	e1 10       	cpse	r14, r1
 5fa:	ea 94       	dec	r14
 5fc:	01 50       	subi	r16, 0x01	; 1
 5fe:	10 40       	sbci	r17, 0x00	; 0
 600:	01 15       	cp	r16, r1
 602:	11 05       	cpc	r17, r1
 604:	79 f7       	brne	.-34     	; 0x5e4 <vfprintf+0x1ac>
 606:	ea c0       	rjmp	.+468    	; 0x7dc <vfprintf+0x3a4>
 608:	94 36       	cpi	r25, 0x64	; 100
 60a:	11 f0       	breq	.+4      	; 0x610 <vfprintf+0x1d8>
 60c:	99 36       	cpi	r25, 0x69	; 105
 60e:	69 f5       	brne	.+90     	; 0x66a <vfprintf+0x232>
 610:	f7 fe       	sbrs	r15, 7
 612:	08 c0       	rjmp	.+16     	; 0x624 <vfprintf+0x1ec>
 614:	f5 01       	movw	r30, r10
 616:	20 81       	ld	r18, Z
 618:	31 81       	ldd	r19, Z+1	; 0x01
 61a:	42 81       	ldd	r20, Z+2	; 0x02
 61c:	53 81       	ldd	r21, Z+3	; 0x03
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0a c0       	rjmp	.+20     	; 0x638 <vfprintf+0x200>
 624:	f5 01       	movw	r30, r10
 626:	80 81       	ld	r24, Z
 628:	91 81       	ldd	r25, Z+1	; 0x01
 62a:	9c 01       	movw	r18, r24
 62c:	44 27       	eor	r20, r20
 62e:	37 fd       	sbrc	r19, 7
 630:	40 95       	com	r20
 632:	54 2f       	mov	r21, r20
 634:	82 e0       	ldi	r24, 0x02	; 2
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	a8 0e       	add	r10, r24
 63a:	b9 1e       	adc	r11, r25
 63c:	9f e6       	ldi	r25, 0x6F	; 111
 63e:	f9 22       	and	r15, r25
 640:	57 ff       	sbrs	r21, 7
 642:	09 c0       	rjmp	.+18     	; 0x656 <vfprintf+0x21e>
 644:	50 95       	com	r21
 646:	40 95       	com	r20
 648:	30 95       	com	r19
 64a:	21 95       	neg	r18
 64c:	3f 4f       	sbci	r19, 0xFF	; 255
 64e:	4f 4f       	sbci	r20, 0xFF	; 255
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	e0 e8       	ldi	r30, 0x80	; 128
 654:	fe 2a       	or	r15, r30
 656:	ca 01       	movw	r24, r20
 658:	b9 01       	movw	r22, r18
 65a:	a1 01       	movw	r20, r2
 65c:	2a e0       	ldi	r18, 0x0A	; 10
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	0e 94 3b 04 	call	0x876	; 0x876 <__ultoa_invert>
 664:	d8 2e       	mov	r13, r24
 666:	d2 18       	sub	r13, r2
 668:	40 c0       	rjmp	.+128    	; 0x6ea <vfprintf+0x2b2>
 66a:	95 37       	cpi	r25, 0x75	; 117
 66c:	29 f4       	brne	.+10     	; 0x678 <vfprintf+0x240>
 66e:	1f 2d       	mov	r17, r15
 670:	1f 7e       	andi	r17, 0xEF	; 239
 672:	2a e0       	ldi	r18, 0x0A	; 10
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	1d c0       	rjmp	.+58     	; 0x6b2 <vfprintf+0x27a>
 678:	1f 2d       	mov	r17, r15
 67a:	19 7f       	andi	r17, 0xF9	; 249
 67c:	9f 36       	cpi	r25, 0x6F	; 111
 67e:	61 f0       	breq	.+24     	; 0x698 <vfprintf+0x260>
 680:	90 37       	cpi	r25, 0x70	; 112
 682:	20 f4       	brcc	.+8      	; 0x68c <vfprintf+0x254>
 684:	98 35       	cpi	r25, 0x58	; 88
 686:	09 f0       	breq	.+2      	; 0x68a <vfprintf+0x252>
 688:	ac c0       	rjmp	.+344    	; 0x7e2 <vfprintf+0x3aa>
 68a:	0f c0       	rjmp	.+30     	; 0x6aa <vfprintf+0x272>
 68c:	90 37       	cpi	r25, 0x70	; 112
 68e:	39 f0       	breq	.+14     	; 0x69e <vfprintf+0x266>
 690:	98 37       	cpi	r25, 0x78	; 120
 692:	09 f0       	breq	.+2      	; 0x696 <vfprintf+0x25e>
 694:	a6 c0       	rjmp	.+332    	; 0x7e2 <vfprintf+0x3aa>
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <vfprintf+0x268>
 698:	28 e0       	ldi	r18, 0x08	; 8
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	0a c0       	rjmp	.+20     	; 0x6b2 <vfprintf+0x27a>
 69e:	10 61       	ori	r17, 0x10	; 16
 6a0:	14 fd       	sbrc	r17, 4
 6a2:	14 60       	ori	r17, 0x04	; 4
 6a4:	20 e1       	ldi	r18, 0x10	; 16
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <vfprintf+0x27a>
 6aa:	14 fd       	sbrc	r17, 4
 6ac:	16 60       	ori	r17, 0x06	; 6
 6ae:	20 e1       	ldi	r18, 0x10	; 16
 6b0:	32 e0       	ldi	r19, 0x02	; 2
 6b2:	17 ff       	sbrs	r17, 7
 6b4:	08 c0       	rjmp	.+16     	; 0x6c6 <vfprintf+0x28e>
 6b6:	f5 01       	movw	r30, r10
 6b8:	60 81       	ld	r22, Z
 6ba:	71 81       	ldd	r23, Z+1	; 0x01
 6bc:	82 81       	ldd	r24, Z+2	; 0x02
 6be:	93 81       	ldd	r25, Z+3	; 0x03
 6c0:	44 e0       	ldi	r20, 0x04	; 4
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <vfprintf+0x29e>
 6c6:	f5 01       	movw	r30, r10
 6c8:	80 81       	ld	r24, Z
 6ca:	91 81       	ldd	r25, Z+1	; 0x01
 6cc:	bc 01       	movw	r22, r24
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	42 e0       	ldi	r20, 0x02	; 2
 6d4:	50 e0       	ldi	r21, 0x00	; 0
 6d6:	a4 0e       	add	r10, r20
 6d8:	b5 1e       	adc	r11, r21
 6da:	a1 01       	movw	r20, r2
 6dc:	0e 94 3b 04 	call	0x876	; 0x876 <__ultoa_invert>
 6e0:	d8 2e       	mov	r13, r24
 6e2:	d2 18       	sub	r13, r2
 6e4:	8f e7       	ldi	r24, 0x7F	; 127
 6e6:	f8 2e       	mov	r15, r24
 6e8:	f1 22       	and	r15, r17
 6ea:	f6 fe       	sbrs	r15, 6
 6ec:	0b c0       	rjmp	.+22     	; 0x704 <vfprintf+0x2cc>
 6ee:	5e ef       	ldi	r21, 0xFE	; 254
 6f0:	f5 22       	and	r15, r21
 6f2:	d9 14       	cp	r13, r9
 6f4:	38 f4       	brcc	.+14     	; 0x704 <vfprintf+0x2cc>
 6f6:	f4 fe       	sbrs	r15, 4
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <vfprintf+0x2d0>
 6fa:	f2 fc       	sbrc	r15, 2
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <vfprintf+0x2d0>
 6fe:	8f ee       	ldi	r24, 0xEF	; 239
 700:	f8 22       	and	r15, r24
 702:	02 c0       	rjmp	.+4      	; 0x708 <vfprintf+0x2d0>
 704:	1d 2d       	mov	r17, r13
 706:	01 c0       	rjmp	.+2      	; 0x70a <vfprintf+0x2d2>
 708:	19 2d       	mov	r17, r9
 70a:	f4 fe       	sbrs	r15, 4
 70c:	0d c0       	rjmp	.+26     	; 0x728 <vfprintf+0x2f0>
 70e:	fe 01       	movw	r30, r28
 710:	ed 0d       	add	r30, r13
 712:	f1 1d       	adc	r31, r1
 714:	80 81       	ld	r24, Z
 716:	80 33       	cpi	r24, 0x30	; 48
 718:	19 f4       	brne	.+6      	; 0x720 <vfprintf+0x2e8>
 71a:	99 ee       	ldi	r25, 0xE9	; 233
 71c:	f9 22       	and	r15, r25
 71e:	08 c0       	rjmp	.+16     	; 0x730 <vfprintf+0x2f8>
 720:	1f 5f       	subi	r17, 0xFF	; 255
 722:	f2 fe       	sbrs	r15, 2
 724:	05 c0       	rjmp	.+10     	; 0x730 <vfprintf+0x2f8>
 726:	03 c0       	rjmp	.+6      	; 0x72e <vfprintf+0x2f6>
 728:	8f 2d       	mov	r24, r15
 72a:	86 78       	andi	r24, 0x86	; 134
 72c:	09 f0       	breq	.+2      	; 0x730 <vfprintf+0x2f8>
 72e:	1f 5f       	subi	r17, 0xFF	; 255
 730:	0f 2d       	mov	r16, r15
 732:	f3 fc       	sbrc	r15, 3
 734:	14 c0       	rjmp	.+40     	; 0x75e <vfprintf+0x326>
 736:	f0 fe       	sbrs	r15, 0
 738:	0f c0       	rjmp	.+30     	; 0x758 <vfprintf+0x320>
 73a:	1e 15       	cp	r17, r14
 73c:	10 f0       	brcs	.+4      	; 0x742 <vfprintf+0x30a>
 73e:	9d 2c       	mov	r9, r13
 740:	0b c0       	rjmp	.+22     	; 0x758 <vfprintf+0x320>
 742:	9d 2c       	mov	r9, r13
 744:	9e 0c       	add	r9, r14
 746:	91 1a       	sub	r9, r17
 748:	1e 2d       	mov	r17, r14
 74a:	06 c0       	rjmp	.+12     	; 0x758 <vfprintf+0x320>
 74c:	80 e2       	ldi	r24, 0x20	; 32
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	b3 01       	movw	r22, r6
 752:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 756:	1f 5f       	subi	r17, 0xFF	; 255
 758:	1e 15       	cp	r17, r14
 75a:	c0 f3       	brcs	.-16     	; 0x74c <vfprintf+0x314>
 75c:	04 c0       	rjmp	.+8      	; 0x766 <vfprintf+0x32e>
 75e:	1e 15       	cp	r17, r14
 760:	10 f4       	brcc	.+4      	; 0x766 <vfprintf+0x32e>
 762:	e1 1a       	sub	r14, r17
 764:	01 c0       	rjmp	.+2      	; 0x768 <vfprintf+0x330>
 766:	ee 24       	eor	r14, r14
 768:	04 ff       	sbrs	r16, 4
 76a:	0f c0       	rjmp	.+30     	; 0x78a <vfprintf+0x352>
 76c:	80 e3       	ldi	r24, 0x30	; 48
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	b3 01       	movw	r22, r6
 772:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 776:	02 ff       	sbrs	r16, 2
 778:	1d c0       	rjmp	.+58     	; 0x7b4 <vfprintf+0x37c>
 77a:	01 fd       	sbrc	r16, 1
 77c:	03 c0       	rjmp	.+6      	; 0x784 <vfprintf+0x34c>
 77e:	88 e7       	ldi	r24, 0x78	; 120
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e c0       	rjmp	.+28     	; 0x7a0 <vfprintf+0x368>
 784:	88 e5       	ldi	r24, 0x58	; 88
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	0b c0       	rjmp	.+22     	; 0x7a0 <vfprintf+0x368>
 78a:	80 2f       	mov	r24, r16
 78c:	86 78       	andi	r24, 0x86	; 134
 78e:	91 f0       	breq	.+36     	; 0x7b4 <vfprintf+0x37c>
 790:	01 ff       	sbrs	r16, 1
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x360>
 794:	8b e2       	ldi	r24, 0x2B	; 43
 796:	01 c0       	rjmp	.+2      	; 0x79a <vfprintf+0x362>
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	f7 fc       	sbrc	r15, 7
 79c:	8d e2       	ldi	r24, 0x2D	; 45
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	b3 01       	movw	r22, r6
 7a2:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <vfprintf+0x37c>
 7a8:	80 e3       	ldi	r24, 0x30	; 48
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	b3 01       	movw	r22, r6
 7ae:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 7b2:	9a 94       	dec	r9
 7b4:	d9 14       	cp	r13, r9
 7b6:	c0 f3       	brcs	.-16     	; 0x7a8 <vfprintf+0x370>
 7b8:	da 94       	dec	r13
 7ba:	f1 01       	movw	r30, r2
 7bc:	ed 0d       	add	r30, r13
 7be:	f1 1d       	adc	r31, r1
 7c0:	80 81       	ld	r24, Z
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	b3 01       	movw	r22, r6
 7c6:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 7ca:	dd 20       	and	r13, r13
 7cc:	a9 f7       	brne	.-22     	; 0x7b8 <vfprintf+0x380>
 7ce:	06 c0       	rjmp	.+12     	; 0x7dc <vfprintf+0x3a4>
 7d0:	80 e2       	ldi	r24, 0x20	; 32
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	b3 01       	movw	r22, r6
 7d6:	0e 94 0f 04 	call	0x81e	; 0x81e <fputc>
 7da:	ea 94       	dec	r14
 7dc:	ee 20       	and	r14, r14
 7de:	c1 f7       	brne	.-16     	; 0x7d0 <vfprintf+0x398>
 7e0:	43 ce       	rjmp	.-890    	; 0x468 <vfprintf+0x30>
 7e2:	f3 01       	movw	r30, r6
 7e4:	66 81       	ldd	r22, Z+6	; 0x06
 7e6:	77 81       	ldd	r23, Z+7	; 0x07
 7e8:	cb 01       	movw	r24, r22
 7ea:	2b 96       	adiw	r28, 0x0b	; 11
 7ec:	e2 e1       	ldi	r30, 0x12	; 18
 7ee:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__epilogue_restores__>

000007f2 <strnlen_P>:
 7f2:	fc 01       	movw	r30, r24
 7f4:	05 90       	lpm	r0, Z+
 7f6:	61 50       	subi	r22, 0x01	; 1
 7f8:	70 40       	sbci	r23, 0x00	; 0
 7fa:	01 10       	cpse	r0, r1
 7fc:	d8 f7       	brcc	.-10     	; 0x7f4 <strnlen_P+0x2>
 7fe:	80 95       	com	r24
 800:	90 95       	com	r25
 802:	8e 0f       	add	r24, r30
 804:	9f 1f       	adc	r25, r31
 806:	08 95       	ret

00000808 <strnlen>:
 808:	fc 01       	movw	r30, r24
 80a:	61 50       	subi	r22, 0x01	; 1
 80c:	70 40       	sbci	r23, 0x00	; 0
 80e:	01 90       	ld	r0, Z+
 810:	01 10       	cpse	r0, r1
 812:	d8 f7       	brcc	.-10     	; 0x80a <strnlen+0x2>
 814:	80 95       	com	r24
 816:	90 95       	com	r25
 818:	8e 0f       	add	r24, r30
 81a:	9f 1f       	adc	r25, r31
 81c:	08 95       	ret

0000081e <fputc>:
 81e:	0f 93       	push	r16
 820:	1f 93       	push	r17
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	8c 01       	movw	r16, r24
 828:	eb 01       	movw	r28, r22
 82a:	8b 81       	ldd	r24, Y+3	; 0x03
 82c:	81 ff       	sbrs	r24, 1
 82e:	1b c0       	rjmp	.+54     	; 0x866 <fputc+0x48>
 830:	82 ff       	sbrs	r24, 2
 832:	0d c0       	rjmp	.+26     	; 0x84e <fputc+0x30>
 834:	2e 81       	ldd	r18, Y+6	; 0x06
 836:	3f 81       	ldd	r19, Y+7	; 0x07
 838:	8c 81       	ldd	r24, Y+4	; 0x04
 83a:	9d 81       	ldd	r25, Y+5	; 0x05
 83c:	28 17       	cp	r18, r24
 83e:	39 07       	cpc	r19, r25
 840:	64 f4       	brge	.+24     	; 0x85a <fputc+0x3c>
 842:	e8 81       	ld	r30, Y
 844:	f9 81       	ldd	r31, Y+1	; 0x01
 846:	01 93       	st	Z+, r16
 848:	f9 83       	std	Y+1, r31	; 0x01
 84a:	e8 83       	st	Y, r30
 84c:	06 c0       	rjmp	.+12     	; 0x85a <fputc+0x3c>
 84e:	e8 85       	ldd	r30, Y+8	; 0x08
 850:	f9 85       	ldd	r31, Y+9	; 0x09
 852:	80 2f       	mov	r24, r16
 854:	09 95       	icall
 856:	89 2b       	or	r24, r25
 858:	31 f4       	brne	.+12     	; 0x866 <fputc+0x48>
 85a:	8e 81       	ldd	r24, Y+6	; 0x06
 85c:	9f 81       	ldd	r25, Y+7	; 0x07
 85e:	01 96       	adiw	r24, 0x01	; 1
 860:	9f 83       	std	Y+7, r25	; 0x07
 862:	8e 83       	std	Y+6, r24	; 0x06
 864:	02 c0       	rjmp	.+4      	; 0x86a <fputc+0x4c>
 866:	0f ef       	ldi	r16, 0xFF	; 255
 868:	1f ef       	ldi	r17, 0xFF	; 255
 86a:	c8 01       	movw	r24, r16
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	1f 91       	pop	r17
 872:	0f 91       	pop	r16
 874:	08 95       	ret

00000876 <__ultoa_invert>:
 876:	fa 01       	movw	r30, r20
 878:	aa 27       	eor	r26, r26
 87a:	28 30       	cpi	r18, 0x08	; 8
 87c:	51 f1       	breq	.+84     	; 0x8d2 <__ultoa_invert+0x5c>
 87e:	20 31       	cpi	r18, 0x10	; 16
 880:	81 f1       	breq	.+96     	; 0x8e2 <__ultoa_invert+0x6c>
 882:	e8 94       	clt
 884:	6f 93       	push	r22
 886:	6e 7f       	andi	r22, 0xFE	; 254
 888:	6e 5f       	subi	r22, 0xFE	; 254
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	8f 4f       	sbci	r24, 0xFF	; 255
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	af 4f       	sbci	r26, 0xFF	; 255
 892:	b1 e0       	ldi	r27, 0x01	; 1
 894:	3e d0       	rcall	.+124    	; 0x912 <__ultoa_invert+0x9c>
 896:	b4 e0       	ldi	r27, 0x04	; 4
 898:	3c d0       	rcall	.+120    	; 0x912 <__ultoa_invert+0x9c>
 89a:	67 0f       	add	r22, r23
 89c:	78 1f       	adc	r23, r24
 89e:	89 1f       	adc	r24, r25
 8a0:	9a 1f       	adc	r25, r26
 8a2:	a1 1d       	adc	r26, r1
 8a4:	68 0f       	add	r22, r24
 8a6:	79 1f       	adc	r23, r25
 8a8:	8a 1f       	adc	r24, r26
 8aa:	91 1d       	adc	r25, r1
 8ac:	a1 1d       	adc	r26, r1
 8ae:	6a 0f       	add	r22, r26
 8b0:	71 1d       	adc	r23, r1
 8b2:	81 1d       	adc	r24, r1
 8b4:	91 1d       	adc	r25, r1
 8b6:	a1 1d       	adc	r26, r1
 8b8:	20 d0       	rcall	.+64     	; 0x8fa <__ultoa_invert+0x84>
 8ba:	09 f4       	brne	.+2      	; 0x8be <__ultoa_invert+0x48>
 8bc:	68 94       	set
 8be:	3f 91       	pop	r19
 8c0:	2a e0       	ldi	r18, 0x0A	; 10
 8c2:	26 9f       	mul	r18, r22
 8c4:	11 24       	eor	r1, r1
 8c6:	30 19       	sub	r19, r0
 8c8:	30 5d       	subi	r19, 0xD0	; 208
 8ca:	31 93       	st	Z+, r19
 8cc:	de f6       	brtc	.-74     	; 0x884 <__ultoa_invert+0xe>
 8ce:	cf 01       	movw	r24, r30
 8d0:	08 95       	ret
 8d2:	46 2f       	mov	r20, r22
 8d4:	47 70       	andi	r20, 0x07	; 7
 8d6:	40 5d       	subi	r20, 0xD0	; 208
 8d8:	41 93       	st	Z+, r20
 8da:	b3 e0       	ldi	r27, 0x03	; 3
 8dc:	0f d0       	rcall	.+30     	; 0x8fc <__ultoa_invert+0x86>
 8de:	c9 f7       	brne	.-14     	; 0x8d2 <__ultoa_invert+0x5c>
 8e0:	f6 cf       	rjmp	.-20     	; 0x8ce <__ultoa_invert+0x58>
 8e2:	46 2f       	mov	r20, r22
 8e4:	4f 70       	andi	r20, 0x0F	; 15
 8e6:	40 5d       	subi	r20, 0xD0	; 208
 8e8:	4a 33       	cpi	r20, 0x3A	; 58
 8ea:	18 f0       	brcs	.+6      	; 0x8f2 <__ultoa_invert+0x7c>
 8ec:	49 5d       	subi	r20, 0xD9	; 217
 8ee:	31 fd       	sbrc	r19, 1
 8f0:	40 52       	subi	r20, 0x20	; 32
 8f2:	41 93       	st	Z+, r20
 8f4:	02 d0       	rcall	.+4      	; 0x8fa <__ultoa_invert+0x84>
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__ultoa_invert+0x6c>
 8f8:	ea cf       	rjmp	.-44     	; 0x8ce <__ultoa_invert+0x58>
 8fa:	b4 e0       	ldi	r27, 0x04	; 4
 8fc:	a6 95       	lsr	r26
 8fe:	97 95       	ror	r25
 900:	87 95       	ror	r24
 902:	77 95       	ror	r23
 904:	67 95       	ror	r22
 906:	ba 95       	dec	r27
 908:	c9 f7       	brne	.-14     	; 0x8fc <__ultoa_invert+0x86>
 90a:	00 97       	sbiw	r24, 0x00	; 0
 90c:	61 05       	cpc	r22, r1
 90e:	71 05       	cpc	r23, r1
 910:	08 95       	ret
 912:	9b 01       	movw	r18, r22
 914:	ac 01       	movw	r20, r24
 916:	0a 2e       	mov	r0, r26
 918:	06 94       	lsr	r0
 91a:	57 95       	ror	r21
 91c:	47 95       	ror	r20
 91e:	37 95       	ror	r19
 920:	27 95       	ror	r18
 922:	ba 95       	dec	r27
 924:	c9 f7       	brne	.-14     	; 0x918 <__ultoa_invert+0xa2>
 926:	62 0f       	add	r22, r18
 928:	73 1f       	adc	r23, r19
 92a:	84 1f       	adc	r24, r20
 92c:	95 1f       	adc	r25, r21
 92e:	a0 1d       	adc	r26, r0
 930:	08 95       	ret

00000932 <__prologue_saves__>:
 932:	2f 92       	push	r2
 934:	3f 92       	push	r3
 936:	4f 92       	push	r4
 938:	5f 92       	push	r5
 93a:	6f 92       	push	r6
 93c:	7f 92       	push	r7
 93e:	8f 92       	push	r8
 940:	9f 92       	push	r9
 942:	af 92       	push	r10
 944:	bf 92       	push	r11
 946:	cf 92       	push	r12
 948:	df 92       	push	r13
 94a:	ef 92       	push	r14
 94c:	ff 92       	push	r15
 94e:	0f 93       	push	r16
 950:	1f 93       	push	r17
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	cd b7       	in	r28, 0x3d	; 61
 958:	de b7       	in	r29, 0x3e	; 62
 95a:	ca 1b       	sub	r28, r26
 95c:	db 0b       	sbc	r29, r27
 95e:	0f b6       	in	r0, 0x3f	; 63
 960:	f8 94       	cli
 962:	de bf       	out	0x3e, r29	; 62
 964:	0f be       	out	0x3f, r0	; 63
 966:	cd bf       	out	0x3d, r28	; 61
 968:	09 94       	ijmp

0000096a <__epilogue_restores__>:
 96a:	2a 88       	ldd	r2, Y+18	; 0x12
 96c:	39 88       	ldd	r3, Y+17	; 0x11
 96e:	48 88       	ldd	r4, Y+16	; 0x10
 970:	5f 84       	ldd	r5, Y+15	; 0x0f
 972:	6e 84       	ldd	r6, Y+14	; 0x0e
 974:	7d 84       	ldd	r7, Y+13	; 0x0d
 976:	8c 84       	ldd	r8, Y+12	; 0x0c
 978:	9b 84       	ldd	r9, Y+11	; 0x0b
 97a:	aa 84       	ldd	r10, Y+10	; 0x0a
 97c:	b9 84       	ldd	r11, Y+9	; 0x09
 97e:	c8 84       	ldd	r12, Y+8	; 0x08
 980:	df 80       	ldd	r13, Y+7	; 0x07
 982:	ee 80       	ldd	r14, Y+6	; 0x06
 984:	fd 80       	ldd	r15, Y+5	; 0x05
 986:	0c 81       	ldd	r16, Y+4	; 0x04
 988:	1b 81       	ldd	r17, Y+3	; 0x03
 98a:	aa 81       	ldd	r26, Y+2	; 0x02
 98c:	b9 81       	ldd	r27, Y+1	; 0x01
 98e:	ce 0f       	add	r28, r30
 990:	d1 1d       	adc	r29, r1
 992:	0f b6       	in	r0, 0x3f	; 63
 994:	f8 94       	cli
 996:	de bf       	out	0x3e, r29	; 62
 998:	0f be       	out	0x3f, r0	; 63
 99a:	cd bf       	out	0x3d, r28	; 61
 99c:	ed 01       	movw	r28, r26
 99e:	08 95       	ret

000009a0 <_exit>:
 9a0:	f8 94       	cli

000009a2 <__stop_program>:
 9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <__stop_program>
