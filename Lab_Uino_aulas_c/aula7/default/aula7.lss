
aula7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005c2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800110  00800110  00000666  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000181  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000890  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003b6  00000000  00000000  000010d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008aa  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000023e  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d8  00000000  00000000  00002126  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 03 01 	jmp	0x206	; 0x206 <__vector_23>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e2 ec       	ldi	r30, 0xC2	; 194
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
  c8:	a0 31       	cpi	r26, 0x10	; 16
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>

000000ce <__do_clear_bss>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e1       	ldi	r26, 0x10	; 16
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 31       	cpi	r26, 0x1A	; 26
  da:	b1 07       	cpc	r27, r17
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  e2:	0c 94 df 02 	jmp	0x5be	; 0x5be <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <USART_init>:
//***************************
// Inicia USART 
//***************************
void USART_init(void)
{
    UBRR1 = 51;                    // define baud rate e habilita a USART
  ea:	83 e3       	ldi	r24, 0x33	; 51
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 cd 00 	sts	0x00CD, r25
  f2:	80 93 cc 00 	sts	0x00CC, r24
    UCSR1B = (1<<TXEN1) | (1<<RXEN1);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c9 00 	sts	0x00C9, r24
}
  fc:	08 95       	ret

000000fe <USART_Send>:

//****************************
// Transmite um byte
//****************************
void USART_Send( unsigned char data )
{
  fe:	98 2f       	mov	r25, r24
    while( !(UCSR1A & (1<<UDRE1)) ); // aguarda buffer de transmissão vazio
 100:	80 91 c8 00 	lds	r24, 0x00C8
 104:	85 ff       	sbrs	r24, 5
 106:	fc cf       	rjmp	.-8      	; 0x100 <USART_Send+0x2>
    UDR1 = data;                     // envia o byte
 108:	90 93 ce 00 	sts	0x00CE, r25
}
 10c:	08 95       	ret

0000010e <USART_Get>:
//***************************
// Receive one byte
//***************************
unsigned char USART_Get(void)
{
    while( !(UCSR1A & (1<<RXC1)) ); //aguarda receber um  byte
 10e:	80 91 c8 00 	lds	r24, 0x00C8
 112:	87 ff       	sbrs	r24, 7
 114:	fc cf       	rjmp	.-8      	; 0x10e <USART_Get>
    return UDR1;                    // retorna byte recebido
 116:	80 91 ce 00 	lds	r24, 0x00CE
}
 11a:	08 95       	ret

0000011c <main>:

// programa principal
int main(void)
{
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	64 97       	sbiw	r28, 0x14	; 20
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
char lcd_buffer[20];
char com_serial;

	IO_init(); // inicia pinos de IO da placa.
 136:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <IO_init>
//***************************
// Inicia USART 
//***************************
void USART_init(void)
{
    UBRR1 = 51;                    // define baud rate e habilita a USART
 13a:	83 e3       	ldi	r24, 0x33	; 51
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 cd 00 	sts	0x00CD, r25
 142:	80 93 cc 00 	sts	0x00CC, r24
    UCSR1B = (1<<TXEN1) | (1<<RXEN1);
 146:	88 e1       	ldi	r24, 0x18	; 24
 148:	80 93 c9 00 	sts	0x00C9, r24
char lcd_buffer[20];
char com_serial;

	IO_init(); // inicia pinos de IO da placa.
	USART_init(); //inicia USART 
	lcd_init(LCD_DISP_ON); //inicia o LCD
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	0e 94 95 02 	call	0x52a	; 0x52a <lcd_init>
	lcd_clrscr(); //Limpa tela do LCD
 152:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_clrscr>
	sprintf(lcd_buffer,"Aperte ACK/BUSY");
 156:	8e 01       	movw	r16, r28
 158:	0f 5f       	subi	r16, 0xFF	; 255
 15a:	1f 4f       	sbci	r17, 0xFF	; 255
 15c:	c8 01       	movw	r24, r16
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	71 e0       	ldi	r23, 0x01	; 1
 162:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <strcpy>
	lcd_puts(lcd_buffer);
 166:	c8 01       	movw	r24, r16
 168:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_puts>
// Transmite um byte
//****************************
void USART_Send( unsigned char data )
{
    while( !(UCSR1A & (1<<UDRE1)) ); // aguarda buffer de transmissão vazio
    UDR1 = data;                     // envia o byte
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	f8 2e       	mov	r15, r24
	sprintf(lcd_buffer,"Aperte ACK/BUSY");
	lcd_puts(lcd_buffer);

	while(1){

		if(Ch_busy_lig){
 170:	12 e4       	ldi	r17, 0x42	; 66
 172:	4d 99       	sbic	0x09, 5	; 9
 174:	08 c0       	rjmp	.+16     	; 0x186 <main+0x6a>
//****************************
// Transmite um byte
//****************************
void USART_Send( unsigned char data )
{
    while( !(UCSR1A & (1<<UDRE1)) ); // aguarda buffer de transmissão vazio
 176:	80 91 c8 00 	lds	r24, 0x00C8
 17a:	85 ff       	sbrs	r24, 5
 17c:	fc cf       	rjmp	.-8      	; 0x176 <main+0x5a>
    UDR1 = data;                     // envia o byte
 17e:	f0 92 ce 00 	sts	0x00CE, r15

	while(1){

		if(Ch_busy_lig){
			USART_Send('A');
			while(Ch_busy_lig);
 182:	4d 9b       	sbis	0x09, 5	; 9
 184:	fe cf       	rjmp	.-4      	; 0x182 <main+0x66>
		}

		if(Ch_ack_lig)USART_Send('B');
 186:	49 99       	sbic	0x09, 1	; 9
 188:	06 c0       	rjmp	.+12     	; 0x196 <main+0x7a>
//****************************
// Transmite um byte
//****************************
void USART_Send( unsigned char data )
{
    while( !(UCSR1A & (1<<UDRE1)) ); // aguarda buffer de transmissão vazio
 18a:	80 91 c8 00 	lds	r24, 0x00C8
 18e:	85 ff       	sbrs	r24, 5
 190:	fc cf       	rjmp	.-8      	; 0x18a <main+0x6e>
    UDR1 = data;                     // envia o byte
 192:	10 93 ce 00 	sts	0x00CE, r17
			while(Ch_busy_lig);
		}

		if(Ch_ack_lig)USART_Send('B');

		if(tem_caracter){
 196:	80 91 c8 00 	lds	r24, 0x00C8
 19a:	87 ff       	sbrs	r24, 7
 19c:	ea cf       	rjmp	.-44     	; 0x172 <main+0x56>
//***************************
// Receive one byte
//***************************
unsigned char USART_Get(void)
{
    while( !(UCSR1A & (1<<RXC1)) ); //aguarda receber um  byte
 19e:	80 91 c8 00 	lds	r24, 0x00C8
 1a2:	87 ff       	sbrs	r24, 7
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <main+0x82>
    return UDR1;                    // retorna byte recebido
 1a6:	00 91 ce 00 	lds	r16, 0x00CE

		if(Ch_ack_lig)USART_Send('B');

		if(tem_caracter){
			com_serial=USART_Get();
			lcd_gotoxy(0,1);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_gotoxy>
			lcd_putc(com_serial);
 1b2:	80 2f       	mov	r24, r16
 1b4:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_putc>

			if(com_serial=='A')Liga_Strobe();
 1b8:	01 34       	cpi	r16, 0x41	; 65
 1ba:	11 f4       	brne	.+4      	; 0x1c0 <main+0xa4>
 1bc:	2f 9a       	sbi	0x05, 7	; 5
 1be:	d9 cf       	rjmp	.-78     	; 0x172 <main+0x56>
			if(com_serial=='B')Desliga_Strobe();
 1c0:	02 34       	cpi	r16, 0x42	; 66
 1c2:	b9 f6       	brne	.-82     	; 0x172 <main+0x56>
 1c4:	2f 98       	cbi	0x05, 7	; 5
 1c6:	d5 cf       	rjmp	.-86     	; 0x172 <main+0x56>

000001c8 <IO_init>:


volatile unsigned int tempo[5];

void IO_init(void){
	DDRB = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1);
 1c8:	8e ef       	ldi	r24, 0xFE	; 254
 1ca:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<6)|(1<<7);
 1cc:	90 ec       	ldi	r25, 0xC0	; 192
 1ce:	97 b9       	out	0x07, r25	; 7
	DDRD = (1<<4)|(1<<6)|(1<<7);
 1d0:	80 ed       	ldi	r24, 0xD0	; 208
 1d2:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0;
 1d4:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0;
 1d6:	10 ba       	out	0x10, r1	; 16
	PORTB = 0;
 1d8:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
 1da:	18 b8       	out	0x08, r1	; 8
	PORTD = (1<<5)|(1<<1)|(1<<0);
 1dc:	83 e2       	ldi	r24, 0x23	; 35
 1de:	8b b9       	out	0x0b, r24	; 11
	PORTE = (1<<2);
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	8e b9       	out	0x0e, r24	; 14
	PORTF = (1<<7)|(1<<6);
 1e4:	91 bb       	out	0x11, r25	; 17
	MCUCR |= (1<<JTD);
 1e6:	85 b7       	in	r24, 0x35	; 53
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<JTD); //desliga interface JTAG.
 1ec:	85 b7       	in	r24, 0x35	; 53
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	85 bf       	out	0x35, r24	; 53
}
 1f2:	08 95       	ret

000001f4 <Timer0_init>:

void Timer0_init(void)
{

	TCNT0 = 217;
 1f4:	89 ed       	ldi	r24, 0xD9	; 217
 1f6:	86 bd       	out	0x26, r24	; 38
	TCCR0A =0;
 1f8:	14 bc       	out	0x24, r1	; 36
	TCCR0B =  (1<<CS02);
 1fa:	84 e0       	ldi	r24, 0x04	; 4
 1fc:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<TOIE0);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	80 93 6e 00 	sts	0x006E, r24
}
 204:	08 95       	ret

00000206 <__vector_23>:


ISR(TIMER0_OVF_vect)
{
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
	TCNT0 = 217;
 214:	89 ed       	ldi	r24, 0xD9	; 217
 216:	86 bd       	out	0x26, r24	; 38
	tempo[0]++;
 218:	80 91 10 01 	lds	r24, 0x0110
 21c:	90 91 11 01 	lds	r25, 0x0111
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	90 93 11 01 	sts	0x0111, r25
 226:	80 93 10 01 	sts	0x0110, r24
	tempo[1]++;
 22a:	80 91 12 01 	lds	r24, 0x0112
 22e:	90 91 13 01 	lds	r25, 0x0113
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	90 93 13 01 	sts	0x0113, r25
 238:	80 93 12 01 	sts	0x0112, r24
	tempo[2]++;
 23c:	80 91 14 01 	lds	r24, 0x0114
 240:	90 91 15 01 	lds	r25, 0x0115
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	90 93 15 01 	sts	0x0115, r25
 24a:	80 93 14 01 	sts	0x0114, r24
	tempo[3]++;
 24e:	80 91 16 01 	lds	r24, 0x0116
 252:	90 91 17 01 	lds	r25, 0x0117
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	90 93 17 01 	sts	0x0117, r25
 25c:	80 93 16 01 	sts	0x0116, r24
	tempo[4]++;
 260:	80 91 18 01 	lds	r24, 0x0118
 264:	90 91 19 01 	lds	r25, 0x0119
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	90 93 19 01 	sts	0x0119, r25
 26e:	80 93 18 01 	sts	0x0118, r24
}
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <Read_ADC>:

int Read_ADC(int canal){

	ADMUX = (1<<REFS0)|canal;  // Set reference to AVcc,seleciona canal
 280:	80 64       	ori	r24, 0x40	; 64
 282:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADPS2)|(1<<ADPS1);  
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADEN)|(1<<ADIF); // Enable ADC
 28c:	86 e9       	ldi	r24, 0x96	; 150
 28e:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA = (1<<ADPS2)|(1<<ADPS1)|(1<<ADEN)|(1<<ADSC); //inicia conversão
 292:	86 ec       	ldi	r24, 0xC6	; 198
 294:	80 93 7a 00 	sts	0x007A, r24
	// Disable digital input buffer on the ADC pin (reduces power consumption)
	DIDR0=(1<<5)|(1<<4)|(1<<1)|(1<<0);
 298:	83 e3       	ldi	r24, 0x33	; 51
 29a:	80 93 7e 00 	sts	0x007E, r24
	while(!(ADCSRA & (1<<ADIF))); // agarda conversão
 29e:	80 91 7a 00 	lds	r24, 0x007A
 2a2:	84 ff       	sbrs	r24, 4
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <Read_ADC+0x1e>
	return ADC;
 2a6:	20 91 78 00 	lds	r18, 0x0078
 2aa:	30 91 79 00 	lds	r19, 0x0079
}
 2ae:	c9 01       	movw	r24, r18
 2b0:	08 95       	ret

000002b2 <Set_PWM_T1A>:

void Set_PWM_T1A(uint16_t valor){
   ICR1 = 0x03FF; // set the TOP value for the PWM to 0x3FF = 10bit
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	33 e0       	ldi	r19, 0x03	; 3
 2b6:	30 93 87 00 	sts	0x0087, r19
 2ba:	20 93 86 00 	sts	0x0086, r18
   TCCR1A |= (1<<COM1A1);
 2be:	e0 e8       	ldi	r30, 0x80	; 128
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	20 81       	ld	r18, Z
 2c4:	20 68       	ori	r18, 0x80	; 128
 2c6:	20 83       	st	Z, r18
   TCCR1B = (1<< WGM13)|(1<< CS11)|(1<< CS10); //T=20ms com ICR=157 step 128us
 2c8:	23 e1       	ldi	r18, 0x13	; 19
 2ca:	20 93 81 00 	sts	0x0081, r18
   TCCR1C = 0;
 2ce:	10 92 82 00 	sts	0x0082, r1
   OCR1A  = valor; //inicializa PWM para saida em tensão = 0 Vcc 4mA
 2d2:	90 93 89 00 	sts	0x0089, r25
 2d6:	80 93 88 00 	sts	0x0088, r24
}
 2da:	08 95       	ret

000002dc <Set_PWM_T1B>:

void Set_PWM_T1B(uint16_t valor){
   ICR1 = 0x03FF; // set the TOP value for the PWM to 0x3FF = 10bit
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	33 e0       	ldi	r19, 0x03	; 3
 2e0:	30 93 87 00 	sts	0x0087, r19
 2e4:	20 93 86 00 	sts	0x0086, r18
   TCCR1A |= (1<<COM1B1);
 2e8:	e0 e8       	ldi	r30, 0x80	; 128
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	20 81       	ld	r18, Z
 2ee:	20 62       	ori	r18, 0x20	; 32
 2f0:	20 83       	st	Z, r18
   TCCR1B = (1<< WGM13)|(1<< CS11)|(1<< CS10); //T=20ms com ICR=157 step 128us
 2f2:	23 e1       	ldi	r18, 0x13	; 19
 2f4:	20 93 81 00 	sts	0x0081, r18
   TCCR1C = 0;
 2f8:	10 92 82 00 	sts	0x0082, r1
   OCR1B  = valor; //inicializa PWM para saida em tensão = 0 Vcc 4mA
 2fc:	90 93 8b 00 	sts	0x008B, r25
 300:	80 93 8a 00 	sts	0x008A, r24
}
 304:	08 95       	ret

00000306 <Set_PWM_T1C>:


void Set_PWM_T1C(uint16_t valor){
   ICR1 = 0x03FF; // set the TOP value for the PWM to 0x3FF = 10bit
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	33 e0       	ldi	r19, 0x03	; 3
 30a:	30 93 87 00 	sts	0x0087, r19
 30e:	20 93 86 00 	sts	0x0086, r18
   TCCR1A |= (1<<COM1C1);
 312:	e0 e8       	ldi	r30, 0x80	; 128
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	20 81       	ld	r18, Z
 318:	28 60       	ori	r18, 0x08	; 8
 31a:	20 83       	st	Z, r18
   TCCR1B = (1<< WGM13)|(1<< CS11)|(1<< CS10); //T=20ms com ICR=157 step 128us
 31c:	23 e1       	ldi	r18, 0x13	; 19
 31e:	20 93 81 00 	sts	0x0081, r18
   TCCR1C = 0;
 322:	10 92 82 00 	sts	0x0082, r1
   OCR1C  = valor; //inicializa PWM para saida em tensão = 0 Vcc 4mA
 326:	90 93 8d 00 	sts	0x008D, r25
 32a:	80 93 8c 00 	sts	0x008C, r24
}
 32e:	08 95       	ret

00000330 <led_on>:

void led_on(unsigned char led){

	switch(led){
 330:	87 30       	cpi	r24, 0x07	; 7
 332:	61 f1       	breq	.+88     	; 0x38c <led_on+0x5c>
 334:	88 30       	cpi	r24, 0x08	; 8
 336:	70 f4       	brcc	.+28     	; 0x354 <led_on+0x24>
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	01 f1       	breq	.+64     	; 0x37c <led_on+0x4c>
 33c:	84 30       	cpi	r24, 0x04	; 4
 33e:	28 f4       	brcc	.+10     	; 0x34a <led_on+0x1a>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	c1 f0       	breq	.+48     	; 0x374 <led_on+0x44>
 344:	82 30       	cpi	r24, 0x02	; 2
 346:	89 f5       	brne	.+98     	; 0x3aa <led_on+0x7a>
 348:	17 c0       	rjmp	.+46     	; 0x378 <led_on+0x48>
 34a:	85 30       	cpi	r24, 0x05	; 5
 34c:	d9 f0       	breq	.+54     	; 0x384 <led_on+0x54>
 34e:	86 30       	cpi	r24, 0x06	; 6
 350:	d8 f4       	brcc	.+54     	; 0x388 <led_on+0x58>
 352:	16 c0       	rjmp	.+44     	; 0x380 <led_on+0x50>
 354:	8b 30       	cpi	r24, 0x0B	; 11
 356:	11 f1       	breq	.+68     	; 0x39c <led_on+0x6c>
 358:	8c 30       	cpi	r24, 0x0C	; 12
 35a:	28 f4       	brcc	.+10     	; 0x366 <led_on+0x36>
 35c:	89 30       	cpi	r24, 0x09	; 9
 35e:	d1 f0       	breq	.+52     	; 0x394 <led_on+0x64>
 360:	8a 30       	cpi	r24, 0x0A	; 10
 362:	d0 f4       	brcc	.+52     	; 0x398 <led_on+0x68>
 364:	15 c0       	rjmp	.+42     	; 0x390 <led_on+0x60>
 366:	8d 30       	cpi	r24, 0x0D	; 13
 368:	e9 f0       	breq	.+58     	; 0x3a4 <led_on+0x74>
 36a:	8d 30       	cpi	r24, 0x0D	; 13
 36c:	c8 f0       	brcs	.+50     	; 0x3a0 <led_on+0x70>
 36e:	8e 30       	cpi	r24, 0x0E	; 14
 370:	e1 f4       	brne	.+56     	; 0x3aa <led_on+0x7a>
 372:	1a c0       	rjmp	.+52     	; 0x3a8 <led_on+0x78>
		case 1: Liga_Strobe();
 374:	2f 9a       	sbi	0x05, 7	; 5
 376:	08 95       	ret
		break;
		case 2: Liga_Feed();
 378:	2b 9a       	sbi	0x05, 3	; 5
 37a:	08 95       	ret
		break;
		case 3: Liga_Sel_in();
 37c:	29 9a       	sbi	0x05, 1	; 5
 37e:	08 95       	ret
		break;
		case 4: Liga_Init();
 380:	2a 9a       	sbi	0x05, 2	; 5
 382:	08 95       	ret
		break;
		case 5: Liga_D0();
 384:	5c 9a       	sbi	0x0b, 4	; 11
 386:	08 95       	ret
		break;
		case 6: Liga_D1();
 388:	5e 9a       	sbi	0x0b, 6	; 11
 38a:	08 95       	ret
		break;
		case 7: Liga_D2();
 38c:	5f 9a       	sbi	0x0b, 7	; 11
 38e:	08 95       	ret
		break;
		case 8: Liga_D3();
 390:	2c 9a       	sbi	0x05, 4	; 5
 392:	08 95       	ret
		break;
		case 9: Liga_D4();
 394:	2d 9a       	sbi	0x05, 5	; 5
 396:	08 95       	ret
		break;
		case 10: Liga_D5();
 398:	2e 9a       	sbi	0x05, 6	; 5
 39a:	08 95       	ret
		break;
		case 11: Liga_D6();
 39c:	46 9a       	sbi	0x08, 6	; 8
 39e:	08 95       	ret
		break;
		case 12: Liga_D7();
 3a0:	47 9a       	sbi	0x08, 7	; 8
 3a2:	08 95       	ret
		break;
		case 13: Liga_LCD_RS();
 3a4:	28 9a       	sbi	0x05, 0	; 5
 3a6:	08 95       	ret
		break;
		case 14: Liga_LCD_E();
 3a8:	76 9a       	sbi	0x0e, 6	; 14
 3aa:	08 95       	ret

000003ac <led_off>:
	}
}

void led_off(unsigned char led){

	switch(led){
 3ac:	87 30       	cpi	r24, 0x07	; 7
 3ae:	61 f1       	breq	.+88     	; 0x408 <led_off+0x5c>
 3b0:	88 30       	cpi	r24, 0x08	; 8
 3b2:	70 f4       	brcc	.+28     	; 0x3d0 <led_off+0x24>
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	01 f1       	breq	.+64     	; 0x3f8 <led_off+0x4c>
 3b8:	84 30       	cpi	r24, 0x04	; 4
 3ba:	28 f4       	brcc	.+10     	; 0x3c6 <led_off+0x1a>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	c1 f0       	breq	.+48     	; 0x3f0 <led_off+0x44>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	89 f5       	brne	.+98     	; 0x426 <led_off+0x7a>
 3c4:	17 c0       	rjmp	.+46     	; 0x3f4 <led_off+0x48>
 3c6:	85 30       	cpi	r24, 0x05	; 5
 3c8:	d9 f0       	breq	.+54     	; 0x400 <led_off+0x54>
 3ca:	86 30       	cpi	r24, 0x06	; 6
 3cc:	d8 f4       	brcc	.+54     	; 0x404 <led_off+0x58>
 3ce:	16 c0       	rjmp	.+44     	; 0x3fc <led_off+0x50>
 3d0:	8b 30       	cpi	r24, 0x0B	; 11
 3d2:	11 f1       	breq	.+68     	; 0x418 <led_off+0x6c>
 3d4:	8c 30       	cpi	r24, 0x0C	; 12
 3d6:	28 f4       	brcc	.+10     	; 0x3e2 <led_off+0x36>
 3d8:	89 30       	cpi	r24, 0x09	; 9
 3da:	d1 f0       	breq	.+52     	; 0x410 <led_off+0x64>
 3dc:	8a 30       	cpi	r24, 0x0A	; 10
 3de:	d0 f4       	brcc	.+52     	; 0x414 <led_off+0x68>
 3e0:	15 c0       	rjmp	.+42     	; 0x40c <led_off+0x60>
 3e2:	8d 30       	cpi	r24, 0x0D	; 13
 3e4:	e9 f0       	breq	.+58     	; 0x420 <led_off+0x74>
 3e6:	8d 30       	cpi	r24, 0x0D	; 13
 3e8:	c8 f0       	brcs	.+50     	; 0x41c <led_off+0x70>
 3ea:	8e 30       	cpi	r24, 0x0E	; 14
 3ec:	e1 f4       	brne	.+56     	; 0x426 <led_off+0x7a>
 3ee:	1a c0       	rjmp	.+52     	; 0x424 <led_off+0x78>
		case 1: Desliga_Strobe();
 3f0:	2f 98       	cbi	0x05, 7	; 5
 3f2:	08 95       	ret
		break;
		case 2: Desliga_Feed();
 3f4:	2b 98       	cbi	0x05, 3	; 5
 3f6:	08 95       	ret
		break;
		case 3: Desliga_Sel_in();
 3f8:	29 98       	cbi	0x05, 1	; 5
 3fa:	08 95       	ret
		break;
		case 4: Desliga_Init();
 3fc:	2a 98       	cbi	0x05, 2	; 5
 3fe:	08 95       	ret
		break;
		case 5: Desliga_D0();
 400:	5c 98       	cbi	0x0b, 4	; 11
 402:	08 95       	ret
		break;
		case 6: Desliga_D1();
 404:	5e 98       	cbi	0x0b, 6	; 11
 406:	08 95       	ret
		break;
		case 7: Desliga_D2();
 408:	5f 98       	cbi	0x0b, 7	; 11
 40a:	08 95       	ret
		break;
		case 8: Desliga_D3();
 40c:	2c 98       	cbi	0x05, 4	; 5
 40e:	08 95       	ret
		break;
		case 9: Desliga_D4();
 410:	2d 98       	cbi	0x05, 5	; 5
 412:	08 95       	ret
		break;
		case 10: Desliga_D5();
 414:	2e 98       	cbi	0x05, 6	; 5
 416:	08 95       	ret
		break;
		case 11: Desliga_D6();
 418:	46 98       	cbi	0x08, 6	; 8
 41a:	08 95       	ret
		break;
		case 12: Desliga_D7();
 41c:	47 98       	cbi	0x08, 7	; 8
 41e:	08 95       	ret
		break;
		case 13: Desliga_LCD_RS();
 420:	28 98       	cbi	0x05, 0	; 5
 422:	08 95       	ret
		break;
		case 14: Desliga_LCD_E();
 424:	76 98       	cbi	0x0e, 6	; 14
 426:	08 95       	ret

00000428 <lcd_write>:
static void lcd_write(uint8_t data,uint8_t rs)
{
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 428:	66 23       	and	r22, r22
 42a:	11 f0       	breq	.+4      	; 0x430 <lcd_write+0x8>
       lcd_rs_high();
 42c:	28 9a       	sbi	0x05, 0	; 5
 42e:	01 c0       	rjmp	.+2      	; 0x432 <lcd_write+0xa>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 430:	28 98       	cbi	0x05, 0	; 5
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 432:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 434:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 436:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 438:	3f 9a       	sbi	0x07, 7	; 7

        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 43a:	47 98       	cbi	0x08, 7	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 43c:	46 98       	cbi	0x08, 6	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 43e:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 440:	2d 98       	cbi	0x05, 5	; 5
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 442:	87 fd       	sbrc	r24, 7
 444:	47 9a       	sbi	0x08, 7	; 8
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 446:	86 fd       	sbrc	r24, 6
 448:	46 9a       	sbi	0x08, 6	; 8
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 44a:	85 fd       	sbrc	r24, 5
 44c:	2e 9a       	sbi	0x05, 6	; 5
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 44e:	84 fd       	sbrc	r24, 4
 450:	2d 9a       	sbi	0x05, 5	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 452:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 454:	e6 e0       	ldi	r30, 0x06	; 6
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <lcd_write+0x30>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 45c:	76 98       	cbi	0x0e, 6	; 14
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 45e:	47 98       	cbi	0x08, 7	; 8
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 460:	46 98       	cbi	0x08, 6	; 8
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 462:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 464:	2d 98       	cbi	0x05, 5	; 5
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 466:	83 fd       	sbrc	r24, 3
 468:	47 9a       	sbi	0x08, 7	; 8
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 46a:	82 fd       	sbrc	r24, 2
 46c:	46 9a       	sbi	0x08, 6	; 8
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 46e:	81 fd       	sbrc	r24, 1
 470:	2e 9a       	sbi	0x05, 6	; 5
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 472:	80 fd       	sbrc	r24, 0
 474:	2d 9a       	sbi	0x05, 5	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 476:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 478:	86 e0       	ldi	r24, 0x06	; 6
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <lcd_write+0x54>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 480:	76 98       	cbi	0x0e, 6	; 14
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        lcd_e_toggle();

        /* all data pins low (inactive) */
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 482:	2d 98       	cbi	0x05, 5	; 5
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 484:	2e 98       	cbi	0x05, 6	; 5
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 486:	46 98       	cbi	0x08, 6	; 8
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 488:	47 98       	cbi	0x08, 7	; 8
    }
}
 48a:	08 95       	ret

0000048c <lcd_command>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 48c:	e0 e8       	ldi	r30, 0x80	; 128
 48e:	fc e0       	ldi	r31, 0x0C	; 12
 490:	31 97       	sbiw	r30, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <lcd_command+0x4>
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    lcd_waitbusy();
    lcd_write(cmd,0);
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
}
 49a:	08 95       	ret

0000049c <lcd_data>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 49c:	e0 e8       	ldi	r30, 0x80	; 128
 49e:	fc e0       	ldi	r31, 0x0C	; 12
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <lcd_data+0x4>
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    lcd_waitbusy();
    lcd_write(data,1);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
}
 4aa:	08 95       	ret

000004ac <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 )
 4ac:	66 23       	and	r22, r22
 4ae:	11 f4       	brne	.+4      	; 0x4b4 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 4b0:	80 58       	subi	r24, 0x80	; 128
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 4b4:	80 54       	subi	r24, 0x40	; 64
 4b6:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_command>
 4ba:	08 95       	ret

000004bc <lcd_getxy>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4bc:	80 e8       	ldi	r24, 0x80	; 128
 4be:	9c e0       	ldi	r25, 0x0C	; 12
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <lcd_getxy+0x4>
/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	08 95       	ret

000004ca <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_command>
}
 4d0:	08 95       	ret

000004d2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_command>
}
 4d8:	08 95       	ret

000004da <lcd_putc>:
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 4da:	e0 e8       	ldi	r30, 0x80	; 128
 4dc:	fc e0       	ldi	r31, 0x0C	; 12
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <lcd_putc+0x4>
{
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    if (c=='\n')
 4e2:	8a 30       	cpi	r24, 0x0A	; 10
 4e4:	21 f4       	brne	.+8      	; 0x4ee <lcd_putc+0x14>
        addressCounter = LCD_START_LINE4;
    else
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 4e6:	80 ec       	ldi	r24, 0xC0	; 192
 4e8:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_command>
 4ec:	08 95       	ret
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	0e 94 14 02 	call	0x428	; 0x428 <lcd_write>
 4f4:	08 95       	ret

000004f6 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	ec 01       	movw	r28, r24
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <lcd_puts+0xc>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
 4fe:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 502:	89 91       	ld	r24, Y+
 504:	88 23       	and	r24, r24
 506:	d9 f7       	brne	.-10     	; 0x4fe <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
 508:	df 91       	pop	r29
 50a:	cf 91       	pop	r28
 50c:	08 95       	ret

0000050e <lcd_puts_p>:
Input:     string from program memory be be displayed
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	ec 01       	movw	r28, r24
 514:	02 c0       	rjmp	.+4      	; 0x51a <lcd_puts_p+0xc>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
 516:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_putc>
 51a:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 51c:	21 96       	adiw	r28, 0x01	; 1
 51e:	84 91       	lpm	r24, Z+
 520:	88 23       	and	r24, r24
 522:	c9 f7       	brne	.-14     	; 0x516 <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 52a:	1f 93       	push	r17
 52c:	18 2f       	mov	r17, r24
     *  Initialize LCD to 4 bit I/O mode
     */


        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 52e:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 530:	6e 9a       	sbi	0x0d, 6	; 13
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 532:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 534:	26 9a       	sbi	0x04, 6	; 4
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 536:	3e 9a       	sbi	0x07, 6	; 7
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 538:	3f 9a       	sbi	0x07, 7	; 7
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	98 ec       	ldi	r25, 0xC8	; 200
 53e:	01 97       	sbiw	r24, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <lcd_init+0x14>
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    delay(16000);        /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 542:	2e 9a       	sbi	0x05, 6	; 5
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 544:	2d 9a       	sbi	0x05, 5	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 546:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 548:	26 e0       	ldi	r18, 0x06	; 6
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	c9 01       	movw	r24, r18
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <lcd_init+0x24>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 552:	76 98       	cbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 554:	86 e6       	ldi	r24, 0x66	; 102
 556:	9e e3       	ldi	r25, 0x3E	; 62
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <lcd_init+0x2e>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 55c:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 55e:	c9 01       	movw	r24, r18
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <lcd_init+0x36>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 564:	76 98       	cbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 566:	8c ec       	ldi	r24, 0xCC	; 204
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	fc 01       	movw	r30, r24
 56c:	31 97       	sbiw	r30, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <lcd_init+0x42>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 570:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 572:	f9 01       	movw	r30, r18
 574:	31 97       	sbiw	r30, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <lcd_init+0x4a>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 578:	76 98       	cbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 57a:	fc 01       	movw	r30, r24
 57c:	31 97       	sbiw	r30, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init+0x52>
    /* repeat last command a third time */
    lcd_e_toggle();
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 580:	2d 98       	cbi	0x05, 5	; 5

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 582:	76 9a       	sbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 584:	f9 01       	movw	r30, r18
 586:	31 97       	sbiw	r30, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <lcd_init+0x5c>
static void toggle_e(void)
{
    lcd_e_high();
	delay(2);
    //lcd_e_delay();
    lcd_e_low();
 58a:	76 98       	cbi	0x0e, 6	; 14
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 58c:	01 97       	sbiw	r24, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <lcd_init+0x62>

    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */



    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 590:	88 e2       	ldi	r24, 0x28	; 40
 592:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_command>


    lcd_command(LCD_DISP_OFF);              /* display off                  */
 596:	88 e0       	ldi	r24, 0x08	; 8
 598:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_command>
    lcd_clrscr();                           /* display clear                */
 59c:	0e 94 65 02 	call	0x4ca	; 0x4ca <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 5a0:	86 e0       	ldi	r24, 0x06	; 6
 5a2:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 5a6:	81 2f       	mov	r24, r17
 5a8:	0e 94 46 02 	call	0x48c	; 0x48c <lcd_command>

}/* lcd_init */
 5ac:	1f 91       	pop	r17
 5ae:	08 95       	ret

000005b0 <strcpy>:
 5b0:	fb 01       	movw	r30, r22
 5b2:	dc 01       	movw	r26, r24
 5b4:	01 90       	ld	r0, Z+
 5b6:	0d 92       	st	X+, r0
 5b8:	00 20       	and	r0, r0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <strcpy+0x4>
 5bc:	08 95       	ret

000005be <_exit>:
 5be:	f8 94       	cli

000005c0 <__stop_program>:
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <__stop_program>
