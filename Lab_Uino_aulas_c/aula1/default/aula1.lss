
aula1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000016b  00000000  00000000  000001b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ee  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001bb  00000000  00000000  00000412  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d1  00000000  00000000  00000600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  000006d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000751  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  bc:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <IO_init>:
#define Liga_D1() PORTB


//define funções e rotinas
void IO_init(void){
	DDRB = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1);
  c4:	8e ef       	ldi	r24, 0xFE	; 254
  c6:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<6)|(1<<7);
  c8:	90 ec       	ldi	r25, 0xC0	; 192
  ca:	97 b9       	out	0x07, r25	; 7
	DDRD = (1<<4)|(1<<6)|(1<<7);
  cc:	80 ed       	ldi	r24, 0xD0	; 208
  ce:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0;
  d0:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0;
  d2:	10 ba       	out	0x10, r1	; 16
	PORTB = 0;
  d4:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
  d6:	18 b8       	out	0x08, r1	; 8
	PORTD = (1<<5)|(1<<1)|(1<<0);
  d8:	83 e2       	ldi	r24, 0x23	; 35
  da:	8b b9       	out	0x0b, r24	; 11
	PORTE = (1<<2);
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	8e b9       	out	0x0e, r24	; 14
	PORTF = (1<<7)|(1<<6);
  e0:	91 bb       	out	0x11, r25	; 17
	MCUCR |= (1<<JTD);
  e2:	85 b7       	in	r24, 0x35	; 53
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<JTD); //desliga interface JTAG.
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	85 bf       	out	0x35, r24	; 53
}
  ee:	08 95       	ret

000000f0 <main>:
int main(void)
{
	// bloco de setup da placa
	// será executado somente 1 vez após reset

	IO_init(); // inicia pinos de IO da placa. 
  f0:	0e 94 62 00 	call	0xc4	; 0xc4 <IO_init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f4:	28 ec       	ldi	r18, 0xC8	; 200
  f6:	30 e0       	ldi	r19, 0x00	; 0

	
	while(1){
		//bloco que será executado repetidamente em loop
		Liga_D0();
  f8:	5c 9a       	sbi	0x0b, 4	; 11
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	97 e2       	ldi	r25, 0x27	; 39
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <main+0xe>
		_delay_ms(1000); // aguarda 1s
		Desliga_D0();
 108:	5c 98       	cbi	0x0b, 4	; 11
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	97 e2       	ldi	r25, 0x27	; 39
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 114:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 116:	d9 f7       	brne	.-10     	; 0x10e <main+0x1e>
 118:	ef cf       	rjmp	.-34     	; 0xf8 <main+0x8>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
