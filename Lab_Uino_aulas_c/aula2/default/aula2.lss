
aula2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000027  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008a  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000056  00000000  00000000  0000022f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000fc  00000000  00000000  00000285  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000091  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <IO_init>:
#define Ch_busy_lig !(PIND & (1<<5))
#define Ch_sel_out_lig !(PINF & (1<<6))

//define funções e rotinas
void IO_init(void){
	DDRB = (1<<7)|(1<<6)|(1<<5)|(1<<4)|(1<<3)|(1<<2)|(1<<1);
  c4:	8e ef       	ldi	r24, 0xFE	; 254
  c6:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<6)|(1<<7);
  c8:	90 ec       	ldi	r25, 0xC0	; 192
  ca:	97 b9       	out	0x07, r25	; 7
	DDRD = (1<<4)|(1<<6)|(1<<7);
  cc:	80 ed       	ldi	r24, 0xD0	; 208
  ce:	8a b9       	out	0x0a, r24	; 10
	DDRE = 0;
  d0:	1d b8       	out	0x0d, r1	; 13
	DDRF = 0;
  d2:	10 ba       	out	0x10, r1	; 16
	PORTB = 0;
  d4:	15 b8       	out	0x05, r1	; 5
	PORTC = 0;
  d6:	18 b8       	out	0x08, r1	; 8
	PORTD = (1<<5)|(1<<1)|(1<<0);
  d8:	83 e2       	ldi	r24, 0x23	; 35
  da:	8b b9       	out	0x0b, r24	; 11
	PORTE = (1<<2);
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	8e b9       	out	0x0e, r24	; 14
	PORTF = (1<<7)|(1<<6);
  e0:	91 bb       	out	0x11, r25	; 17
	MCUCR |= (1<<JTD);
  e2:	85 b7       	in	r24, 0x35	; 53
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<JTD); //desliga interface JTAG.
  e8:	85 b7       	in	r24, 0x35	; 53
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	85 bf       	out	0x35, r24	; 53
}
  ee:	08 95       	ret

000000f0 <main>:
int main(void)
{
	// bloco de setup da placa
	// será executado somente 1 vez após reset

	IO_init(); // inicia pinos de IO da placa. 
  f0:	0e 94 62 00 	call	0xc4	; 0xc4 <IO_init>

	
	while(1){
		//bloco que será executado repetidamente em loop
		if(Ch_busy_lig){
  f4:	4d 99       	sbic	0x09, 5	; 9
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0xc>
			Liga_D0();
  f8:	5c 9a       	sbi	0x0b, 4	; 11
			Desliga_D7();
  fa:	47 98       	cbi	0x08, 7	; 8
		}

		if(Ch_sel_out_lig){
  fc:	7e 99       	sbic	0x0f, 6	; 15
  fe:	fa cf       	rjmp	.-12     	; 0xf4 <main+0x4>
			Liga_D7();
 100:	47 9a       	sbi	0x08, 7	; 8
			Desliga_D0();
 102:	5c 98       	cbi	0x0b, 4	; 11
 104:	f7 cf       	rjmp	.-18     	; 0xf4 <main+0x4>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
